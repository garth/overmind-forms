{"version":3,"file":"isFormValid.js","sourceRoot":"","sources":["../src/isFormValid.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,MAAM,WAAW,GAAoD,IAAI,CAAC,EAAE;IACjF,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAA;IACxC,IAAI,KAAK,GAAG,IAAI,CAAA;IAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QACjC,IAAI,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,EAAG;YAC/I,kGAAkG;YAClG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAA;YACvC,OAAO,CAAC,GAAG,CAAC,2BAA2B,SAAS,wBAAwB,KAAK,YAAY,SAAS,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAA;YACxI,IAAI,CAAC,KAAK;gBAAE,OAAO,IAAI,CAAA,CAAC,4CAA4C;SACrE;IACH,CAAC,CAAC,CAAA;IAEF,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAA;IAC/D,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAID,oDAAoD;AACpD,gDAAgD;AAChD,EAAE;AACF,mDAAmD;AACnD,yFAAyF;AACzF,0DAA0D;AAC1D,MAAM;AACN,EAAE;AACF,8CAA8C;AAC9C,EAAE;AACF,yCAAyC;AACzC,oEAAoE;AACpE,sBAAsB;AACtB,EAAE;AACF,6DAA6D;AAC7D,yFAAyF;AACzF,iHAAiH;AACjH,uJAAuJ;AACvJ,gDAAgD;AAChD,6DAA6D;AAC7D,oBAAoB;AACpB,QAAQ;AACR,OAAO;AACP,EAAE;AACF,yDAAyD;AACzD,EAAE;AACF,YAAY;AACZ,wCAAwC;AACxC,EAAE;AACF,IAAI;AACJ,EAAE;AACF,mCAAmC;AAGnC,kBAAkB;AAClB,mBAAmB;AACnB,uBAAuB;AACvB,iBAAiB;AACjB,uBAAuB;AACvB,6BAA6B;AAC7B,qBAAqB;AACrB,4BAA4B;AAC5B,0BAA0B;AAC1B,iCAAiC;AACjC,qBAAqB;AACrB,aAAa;AACb,+BAA+B;AAC/B,WAAW;AACX,2BAA2B;AAC3B,QAAQ;AACR,MAAM;AACN,IAAI;AAEJ,6BAA6B;AAC7B,gCAAgC;AAChC;;EAEE","sourcesContent":["// @ts-ignore\nimport { FormField, formField } from './formField'\nimport { Derive } from 'overmind'\n\nexport const isFormValid: Derive<boolean, { [field: string]: FormField }> = form => {\n  console.log(\"isFormValid.ts:form\", form)\n  let valid = true\n  Object.keys(form).find(fieldName => {\n    if (fieldName !== 'isValid' && form.hasOwnProperty(fieldName) && form[fieldName].hasOwnProperty('isValid') && !form[fieldName].isValid.isValid ) {\n      // type definition isn't quite right?, `form[fieldName].isValid` is [object Object], not 'boolean'\n      valid = form[fieldName].isValid.isValid\n      console.dir(`isFormValid triggered: '${fieldName}.isValid.isValid' is ${valid}\\n\\tform[${fieldName}].isValid:`, form[fieldName].isValid)\n      if (!valid) return true // stop looking when find a {isValid: false}\n    }\n  })\n\n  console.log(\"isFormValid.ts:form:valid\", JSON.stringify(valid))\n  return valid\n}\n\n\n\n// -------------------------------------------------\n// node_modules/overmind-forms/es/isFormValid.js\n//\n// fixes broken `Object.keys(form).find(...)` logic\n//   function-state-tree or proxied object fields kept causing recursive stack overflows;\n//   I don't think this approach is very \"overmindish\"....\n// ---\n//\n// let count = 0;  // recursion overflow guard\n//\n// export const isFormValid = (form) => {\n//   if (count > 500) return false       // recursion overflow guard\n//   let valid = true;\n//\n//   // TODO refactor into function; run also on 'isPristene'\n//   // valid = valid && !form[fieldName].isPristine  // form not valid before user input\n//   Object.keys(form).find(fieldName => {  /* tricky use of Array.find() - it stops after first 'true' return */\n//     if (fieldName !== 'isValid' && form.hasOwnProperty(fieldName) && form[fieldName].hasOwnProperty('isValid') && !form[fieldName].isValid.isValid){\n//       valid = form[fieldName].isValid.isValid\n//       console.dir(count, ` hit! ${fieldName} is ${valid}`)\n//       return true\n//     }\n//   })\n//\n//   // console.dir(\"isFormValid.ts:form \", count, valid)\n//\n//   count++\n//   return !!valid  // boolean typecast\n//\n// }\n//\n// --------------------------------\n\n\n// const mock2 = {\n//   \"loginForm\": {\n//     \"isValid\": true,\n//     \"email\": {\n//       \"value\": \"aa\",\n//       \"isPristine\": false,\n//       \"isValid\": {\n//         \"isValid\": false,\n//         \"failedRule\": {\n//           \"name\": \"minLength\",\n//           \"arg\": 3\n//         },\n//         \"errorMessage\": null\n//       },\n//       \"showError\": false\n//     }\n//   }\n// }\n\n// isFormValid(mock2, {}) //?\n// isFormValid(mockForm, {}) //?\n/*\n\n*/\n"]}