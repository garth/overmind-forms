{"version":3,"file":"form.js","sourceRoot":"","sources":["../src/form.ts"],"names":[],"mappings":";;AAAA,2CAA2D;AAC3D,+CAA2C;AAW9B,QAAA,IAAI,GAAG,CAA2B,MAAS,EAAW,EAAE,CACnE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CACxB,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE;IAClB,IAAI,CAAC,SAAS,CAAC,GAAG,qBAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAA;IAC/E,OAAO,IAAI,CAAA;AACb,CAAC,EACD,EAAE,OAAO,EAAE,yBAAW,EAAE,CAClB,CAAA","sourcesContent":["import { IsValid, formField, FormField } from './formField'\nimport { isFormValid } from './isFormValid'\n\ninterface FormDefinition {\n  [fieldName: string]: {\n    value?: string\n    isValid?: boolean | IsValid\n  }\n}\ntype FormFields<T extends FormDefinition> = { [F in keyof T]: FormField }\ntype Form<T extends FormDefinition> = { isValid: typeof isFormValid } & FormFields<T>\n\nexport const form = <T extends FormDefinition>(fields: T): Form<T> =>\n  Object.keys(fields).reduce(\n    (form, fieldName) => {\n      form[fieldName] = formField(fields[fieldName].value, fields[fieldName].isValid)\n      return form\n    },\n    { isValid: isFormValid }\n  ) as any\n"]}